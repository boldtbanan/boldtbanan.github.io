(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _constantsMaturityConstants = require('../constants/maturity-constants');

var _dispatchersDispatcher = require('../dispatchers/dispatcher');

var _dispatchersDispatcher2 = _interopRequireDefault(_dispatchersDispatcher);

var AlgorithmActions = (function () {
  function AlgorithmActions() {
    _classCallCheck(this, AlgorithmActions);
  }

  _createClass(AlgorithmActions, null, [{
    key: 'updateCategoryWeight',
    value: function updateCategoryWeight(category, weight) {
      _dispatchersDispatcher2['default'].dispatch({
        type: _constantsMaturityConstants.ActionTypes.UPDATE_CATEGORY_VALUE_WEIGHT,
        category: category,
        weight: Number(weight)
      });
    }
  }, {
    key: 'updateCategoryValueWeight',
    value: function updateCategoryValueWeight(category, position, weight) {
      _dispatchersDispatcher2['default'].dispatch({
        type: _constantsMaturityConstants.ActionTypes.UPDATE_CATEGORY_VALUE_WEIGHT,
        category: category,
        position: Number(position),
        weight: weight
      });
    }
  }, {
    key: 'updateBandPosition',
    value: function updateBandPosition(position, value) {
      _dispatchersDispatcher2['default'].dispatch({
        type: _constantsMaturityConstants.ActionTypes.UPDATE_BAND_POSITION,
        position: position,
        value: value
      });
    }
  }, {
    key: 'storeAlgorithm',
    value: function storeAlgorithm() {
      _dispatchersDispatcher2['default'].dispatch({
        type: _constantsMaturityConstants.ActionTypes.STORE_ALGORITHM
      });
    }
  }, {
    key: 'resetAlgorithm',
    value: function resetAlgorithm() {
      _dispatchersDispatcher2['default'].dispatch({
        type: _constantsMaturityConstants.ActionTypes.RESET_ALGORITHM
      });
    }
  }, {
    key: 'loadHistoricalAlgorithm',
    value: function loadHistoricalAlgorithm(timestamp) {
      _dispatchersDispatcher2['default'].dispatch({
        type: _constantsMaturityConstants.ActionTypes.LOAD_ALGORITHM,
        timestamp: timestamp
      });
    }
  }, {
    key: 'deleteHistoricalAlgorithm',
    value: function deleteHistoricalAlgorithm(timestamp) {
      _dispatchersDispatcher2['default'].dispatch({
        type: _constantsMaturityConstants.ActionTypes.DELETE_ALGORITHM,
        timestamp: timestamp
      });
    }
  }]);

  return AlgorithmActions;
})();

exports['default'] = AlgorithmActions;
module.exports = exports['default'];


},{"../constants/maturity-constants":10,"../dispatchers/dispatcher":12}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _dispatchersDispatcher = require('../dispatchers/dispatcher');

var _dispatchersDispatcher2 = _interopRequireDefault(_dispatchersDispatcher);

var _constantsMaturityConstants = require('../constants/maturity-constants');

exports['default'] = {
  updateAssessment: function updateAssessment(data) {
    console.log('in action');
    _dispatchersDispatcher2['default'].dispatch({
      type: _constantsMaturityConstants.ActionTypes.UPDATE_ASSESSMENT,
      data: data
    });
  }
};
module.exports = exports['default'];


},{"../constants/maturity-constants":10,"../dispatchers/dispatcher":12}],3:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactRouter = require('react-router');

var _componentsTeamMaturity = require('./components/team-maturity');

var _componentsTeamMaturity2 = _interopRequireDefault(_componentsTeamMaturity);

(0, _reactDom.render)(_react2['default'].createElement(
	'div',
	{ id: 'outer-container' },
	_react2['default'].createElement(
		'div',
		{ id: 'page-wrap' },
		_react2['default'].createElement(
			_reactRouter.Router,
			null,
			_react2['default'].createElement(_reactRouter.Route, { path: '/', component: _componentsTeamMaturity2['default'] })
		)
	)
), document.getElementById('team-maturity-app'));


},{"./components/team-maturity":9,"react":"react","react-dom":"react-dom","react-router":"react-router"}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _actionsAlgorithmActions = require('../actions/algorithm-actions');

var _actionsAlgorithmActions2 = _interopRequireDefault(_actionsAlgorithmActions);

var AlgorithmBandEditor = (function (_React$Component) {
  _inherits(AlgorithmBandEditor, _React$Component);

  function AlgorithmBandEditor() {
    _classCallCheck(this, AlgorithmBandEditor);

    _get(Object.getPrototypeOf(AlgorithmBandEditor.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(AlgorithmBandEditor, [{
    key: 'render',
    value: function render() {
      var _this = this;

      return _react2['default'].createElement(
        'div',
        { className: 'algorithm-band-editor' },
        _react2['default'].createElement(
          'h5',
          null,
          'Bands ',
          _react2['default'].createElement(
            'small',
            null,
            '(minimum to qualify as % of max)'
          )
        ),
        _react2['default'].createElement(
          'table',
          null,
          _react2['default'].createElement(
            'thead',
            null,
            _react2['default'].createElement(
              'tr',
              null,
              (function () {
                return _lodash2['default'].map(_this.props.bands, function (b, i) {
                  return _react2['default'].createElement(
                    'th',
                    { key: i },
                    i
                  );
                });
              })()
            )
          ),
          _react2['default'].createElement(
            'tbody',
            null,
            _react2['default'].createElement(
              'tr',
              null,
              (function () {
                return _lodash2['default'].map(_this.props.bands, function (b, i) {
                  return _react2['default'].createElement(
                    'td',
                    { key: i },
                    _react2['default'].createElement('input', { type: 'number', value: b, onChange: _this._onBandChange.bind(_this, i) })
                  );
                });
              })()
            )
          )
        )
      );
    }
  }, {
    key: '_onBandChange',
    value: function _onBandChange(index, e) {
      console.log('update [' + index + '] to ' + e.target.value);

      _actionsAlgorithmActions2['default'].updateBandPosition(index, e.target.value);
    }
  }]);

  return AlgorithmBandEditor;
})(_react2['default'].Component);

exports['default'] = AlgorithmBandEditor;
module.exports = exports['default'];


},{"../actions/algorithm-actions":1,"lodash":"lodash","react":"react"}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _actionsAlgorithmActions = require('../actions/algorithm-actions');

var _actionsAlgorithmActions2 = _interopRequireDefault(_actionsAlgorithmActions);

var AlgorithmEditor = (function (_React$Component) {
  _inherits(AlgorithmEditor, _React$Component);

  function AlgorithmEditor(props) {
    _classCallCheck(this, AlgorithmEditor);

    _get(Object.getPrototypeOf(AlgorithmEditor.prototype), 'constructor', this).call(this, props);
  }

  _createClass(AlgorithmEditor, [{
    key: 'render',
    value: function render() {
      var _this = this;

      return _react2['default'].createElement(
        'div',
        { className: 'algorithm-editor' },
        _react2['default'].createElement(
          'h5',
          null,
          'Weights'
        ),
        _react2['default'].createElement(
          'table',
          null,
          _react2['default'].createElement(
            'tbody',
            null,
            (function () {
              return _lodash2['default'].map(_this.props.algorithm, function (category, key) {
                return _react2['default'].createElement(
                  'tr',
                  { key: key },
                  _react2['default'].createElement(
                    'td',
                    null,
                    key
                  ),
                  (function () {
                    return _lodash2['default'].map(category.resultWeights, function (val, index) {
                      return _react2['default'].createElement(
                        'td',
                        { key: key + '-' + index },
                        _react2['default'].createElement('input', { type: 'number', onChange: _this._changeCategoryValue.bind(_this, key, index), value: val })
                      );
                    });
                  })()
                );
              });
            })()
          )
        )
      );
    }
  }, {
    key: '_changeCategoryValue',
    value: function _changeCategoryValue(key, index, e) {
      _actionsAlgorithmActions2['default'].updateCategoryValueWeight(key, index, e.target.value);
    }
  }]);

  return AlgorithmEditor;
})(_react2['default'].Component);

exports['default'] = AlgorithmEditor;
module.exports = exports['default'];


},{"../actions/algorithm-actions":1,"lodash":"lodash","react":"react"}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _actionsAlgorithmActions = require('../actions/algorithm-actions');

var _actionsAlgorithmActions2 = _interopRequireDefault(_actionsAlgorithmActions);

var AlgorithmHistory = (function (_React$Component) {
  _inherits(AlgorithmHistory, _React$Component);

  function AlgorithmHistory(props) {
    _classCallCheck(this, AlgorithmHistory);

    _get(Object.getPrototypeOf(AlgorithmHistory.prototype), 'constructor', this).call(this, props);
  }

  _createClass(AlgorithmHistory, [{
    key: 'render',
    value: function render() {
      var _this = this;

      return _react2['default'].createElement(
        'div',
        { className: 'algorithm-history' },
        _react2['default'].createElement(
          'button',
          { onClick: this.resetAlgorithm.bind(this) },
          'Reset'
        ),
        '  ',
        _react2['default'].createElement(
          'button',
          { onClick: this.snapshotAlgorithm.bind(this) },
          _react2['default'].createElement('i', { className: 'fa fa-camera fa-lg' }),
          ' Snapshot'
        ),
        _react2['default'].createElement(
          'h5',
          null,
          'Snapshots'
        ),
        (function () {
          return !_this.props.algorithmHistory.length ? _react2['default'].createElement(
            'div',
            { className: 'no-history' },
            'No snapshots'
          ) : _react2['default'].createElement(
            'ul',
            { className: 'history-items' },
            (function () {
              _lodash2['default'].map(_this.props.algorithmHistory, function (h, i) {
                var d = new Date(h.timestamp);

                return _react2['default'].createElement(
                  'li',
                  { className: 'history-item', key: i },
                  _react2['default'].createElement(
                    'h6',
                    null,
                    _react2['default'].createElement(
                      'a',
                      { href: '', onClick: _this.loadHistoryItem.bind(_this, h.timestamp) },
                      d + ''
                    )
                  ),
                  _react2['default'].createElement(
                    'section',
                    null,
                    _react2['default'].createElement(
                      'ul',
                      { className: 'inline-list' },
                      _react2['default'].createElement(
                        'li',
                        null,
                        _react2['default'].createElement(
                          'a',
                          { href: '', onClick: _this.loadHistoryItem.bind(_this, h.timestamp) },
                          _react2['default'].createElement('i', { className: 'fa fa-external-link-square' })
                        )
                      ),
                      _react2['default'].createElement(
                        'li',
                        null,
                        _react2['default'].createElement(
                          'a',
                          { href: '', onClick: _this.deleteHistoryItem.bind(_this, h.timestamp) },
                          _react2['default'].createElement('i', { className: 'fa fa-trash' })
                        )
                      )
                    )
                  )
                );
              });
            })()
          );
        })()
      );
    }
  }, {
    key: 'resetAlgorithm',
    value: function resetAlgorithm(e) {
      e.preventDefault();

      _actionsAlgorithmActions2['default'].resetAlgorithm();
    }
  }, {
    key: 'snapshotAlgorithm',
    value: function snapshotAlgorithm(e) {
      e.preventDefault();

      _actionsAlgorithmActions2['default'].storeAlgorithm();
    }
  }, {
    key: 'loadHistoryItem',
    value: function loadHistoryItem(timestamp, e) {
      e.preventDefault();

      _actionsAlgorithmActions2['default'].loadHistoricalAlgorithm(timestamp);
    }
  }, {
    key: 'deleteHistoryItem',
    value: function deleteHistoryItem(timestamp, e) {
      e.preventDefault();

      _actionsAlgorithmActions2['default'].deleteHistoricalAlgorithm(timestamp);
    }
  }]);

  return AlgorithmHistory;
})(_react2['default'].Component);

exports['default'] = AlgorithmHistory;
module.exports = exports['default'];


},{"../actions/algorithm-actions":1,"lodash":"lodash","react":"react"}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _actionsAssessmentActions = require('../actions/assessment-actions');

var _actionsAssessmentActions2 = _interopRequireDefault(_actionsAssessmentActions);

var DataEditor = (function (_React$Component) {
  _inherits(DataEditor, _React$Component);

  function DataEditor(props) {
    _classCallCheck(this, DataEditor);

    _get(Object.getPrototypeOf(DataEditor.prototype), 'constructor', this).call(this, props);

    this.state = {
      data: JSON.stringify(props.data, null, 2)
    };
  }

  _createClass(DataEditor, [{
    key: 'render',
    value: function render() {
      var data = this.state.data;

      return _react2['default'].createElement(
        'div',
        { className: 'data-editor' },
        _react2['default'].createElement('textarea', { value: data, onChange: this.changeData.bind(this) }),
        _react2['default'].createElement(
          'button',
          { onClick: this.saveData.bind(this) },
          'save changes'
        ),
        _react2['default'].createElement(
          'p',
          null,
          'Or...'
        ),
        _react2['default'].createElement(
          'label',
          null,
          'Upload File',
          _react2['default'].createElement('input', { type: 'file', onChange: this.handleFile.bind(this) })
        )
      );
    }
  }, {
    key: 'changeData',
    value: function changeData(e) {
      e.preventDefault();

      this.setState({ data: e.target.value });
    }
  }, {
    key: 'saveData',
    value: function saveData(e) {
      e.preventDefault();

      try {
        var algorithm = JSON.parse(this.state.data);
        console.log(algorithm);
        _actionsAssessmentActions2['default'].updateAssessment(algorithm);
      } catch (e) {
        console.log(e);
      }
    }
  }, {
    key: 'handleFile',
    value: function handleFile(e) {}
  }]);

  return DataEditor;
})(_react2['default'].Component);

DataEditor.defaultProps = {
  data: {}
};

exports['default'] = DataEditor;
module.exports = exports['default'];


},{"../actions/assessment-actions":2,"react":"react"}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _d3 = require('d3');

var _d32 = _interopRequireDefault(_d3);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var width = 600,
    height = 600,
    nodeRadius = 14.5;
var diameter = Math.min(width, height) - 3 * nodeRadius;
var duration = 1500;

var tree = _d32['default'].layout.tree().size([height, width - 160]);

var cluster = _d32['default'].layout.cluster().size([height, width - 160]);

var diagonal = _d32['default'].svg.diagonal().projection(function (d) {
  return [d.y, d.x];
});

var radialTree = _d32['default'].layout.tree().size([360, diameter / 2]).separation(function (a, b) {
  return (a.parent == b.parent ? 1 : 2) / a.depth;
});

var radialCluster = _d32['default'].layout.cluster().size([360, diameter / 2]).separation(function (a, b) {
  return (a.parent == b.parent ? 1 : 2) / a.depth;
});

var radialDiagonal = _d32['default'].svg.diagonal.radial().projection(function (d) {
  return [d.y, d.x / 180 * Math.PI];
});

var MaturityChart = (function (_React$Component) {
  _inherits(MaturityChart, _React$Component);

  function MaturityChart(props) {
    _classCallCheck(this, MaturityChart);

    _get(Object.getPrototypeOf(MaturityChart.prototype), 'constructor', this).call(this, props);
  }

  _createClass(MaturityChart, [{
    key: 'render',
    value: function render() {
      return _react2['default'].createElement('div', { className: 'maturity-chart' });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var dom = _reactDom2['default'].findDOMNode(this);
      this.chart = this._createChart(dom, this.props);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var dom = _reactDom2['default'].findDOMNode(this);
      dom.removeChild(dom.children[0]);
      this.chart = null;
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(props) {
      var dom = _reactDom2['default'].findDOMNode(this);
      dom.removeChild(dom.children[0]);
      this.chart = this._createChart(dom, props);
      //		this._updateChart(props, this.props.mode !== props.mode);

      return false;
    }
  }, {
    key: '_updateChart',
    value: function _updateChart(props, transition) {
      transition = transition !== false;
      var helpers = this._getChartHelpers(props);

      if (helpers) {
        this._updateData(props.data, this.chart, this.link, this.node, helpers);

        if (transition) {
          this._transition(props.data, this.chart, this.link, this.node, helpers);
        }
      }
    }
  }, {
    key: '_getChartHelpers',
    value: function _getChartHelpers(props) {
      var helpers;

      var radialHelperBase = {
        diagonal: radialDiagonal,
        chartTransform: "translate(" + width / 2 + "," + height / 2 + ")",
        nodeTransform: function nodeTransform(d) {
          return "rotate(" + (d.x - 90) + ")translate(" + d.y + ")";
        },
        inverseNodeTransform: function inverseNodeTransform(d) {
          return 'rotate(' + (90 - d.x) + ')';
        },
        nameAnchor: function nameAnchor(d) {
          return d.x > 35 && d.x < 125 ? 'end' : 'start';
        },
        nameOffset: function nameOffset(d) {
          return d.x > 35 && d.x < 125 ? -(nodeRadius + 3) : nodeRadius + 3;
        }
      };

      var treeHelperBase = {
        diagonal: diagonal,
        chartTransform: 'translate(40,0)',
        nodeTransform: function nodeTransform(d) {
          return "translate(" + d.y + "," + d.x + ")";
        },
        inverseNodeTransform: function inverseNodeTransform() {
          return '';
        },
        nameAnchor: function nameAnchor(d) {
          return d.children ? 'end' : 'start';
        },
        nameOffset: function nameOffset(d) {
          return d.children ? -(nodeRadius + 3) : nodeRadius + 3;
        }
      };

      switch (props.mode) {
        case 'radialtree':
          helpers = Object.assign({}, radialHelperBase, {
            className: 'radial-tree',
            layout: radialTree
          });
          break;

        case 'radialcluster':
          helpers = Object.assign({}, radialHelperBase, {
            className: 'radial-cluster',
            layout: radialCluster
          });
          break;

        case 'tree':
          helpers = Object.assign({}, treeHelperBase, {
            className: 'tree',
            layout: tree
          });
          break;

        case 'cluster':
        default:
          helpers = Object.assign({}, treeHelperBase, {
            className: 'cluster',
            layout: cluster
          });
          break;
      }

      return helpers;
    }
  }, {
    key: '_createChart',
    value: function _createChart(dom, props) {
      var helpers = this._getChartHelpers(props);

      var chart = _d32['default'].select(dom).append("svg").attr('viewBox', '0 0 ' + width + ' ' + height).attr("width", width).attr("height", height).append("g").attr('class', helpers.className).attr('transform', helpers.chartTransform);

      var root = _lodash2['default'].clone(props.data, true);
      var nodes = this.nodes = helpers.layout.nodes(root);
      var links = this.links = helpers.layout.links(this.nodes);

      var link = this.link = chart.selectAll(".link").data(links, function (l) {
        return l.source.name + '=>' + l.target.name;
      }).enter().append("path").attr("class", "link").attr("d", helpers.diagonal);

      var node = this.node = chart.selectAll(".node").data(nodes, function (d) {
        return (d.hasOwnProperty('ratings') ? 't_' : 'a_') + d.name;
      }).enter().append("g").attr("class", "node").attr("transform", helpers.nodeTransform);

      node.append("circle").attr('class', this.props.nodeClassEvaluator).attr("r", nodeRadius);

      node.append("text").attr('class', 'team-name').attr("dx", helpers.nameOffset).attr("dy", 3).attr('transform', helpers.inverseNodeTransform).style("text-anchor", helpers.nameAnchor).text(function (d) {
        return d.name;
      });

      node.append("text").attr('class', 'team-score').attr('transform', helpers.inverseNodeTransform).text(this.props.nodeScoreEvaluator).style('text-anchor', 'middle').attr('dx', 0).attr('dy', 3);

      return chart;
    }
  }, {
    key: '_updateData',
    value: function _updateData(root, chart, link, node, helpers) {
      var nodes = helpers.layout.nodes(root);
      var links = helpers.layout.links(nodes);

      chart.attr('class', helpers.className);

      node.select('circle').attr('class', this.props.nodeClassEvaluator);

      node.select('text.team-name').text(function (d) {
        return d.name;
      });

      node.select('text.team-score').text(this.props.nodeScoreEvaluator);
    }
  }, {
    key: '_transition',
    value: function _transition(root, chart, link, node, helpers) {
      var nodes = helpers.layout.nodes(root);
      var links = helpers.layout.links(nodes);

      chart.transition().duration(duration) // TODO: replace "duration" with prop
      .attr("transform", helpers.chartTransform);

      link.data(links).transition().duration(duration) // TODO: replace "duration"
      .attr('d', helpers.diagonal);

      node.data(nodes).transition().duration(duration).attr('transform', helpers.nodeTransform);

      node.select('text.team-name').transition().duration(duration).attr("dx", helpers.nameOffset).attr('transform', helpers.inverseNodeTransform).style("text-anchor", helpers.nameAnchor);

      node.select('text.team-score').transition().duration(duration).attr('transform', helpers.inverseNodeTransform);
    }
  }]);

  return MaturityChart;
})(_react2['default'].Component);

MaturityChart.defaultProps = {
  nodeClassEvaluator: function nodeClassEvaluator() {},
  nodeScoreEvaluator: function nodeScoreEvaluator() {
    return '10';
  }
};

exports['default'] = MaturityChart;
module.exports = exports['default'];


},{"d3":"d3","lodash":"lodash","react":"react","react-dom":"react-dom"}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _d3 = require('d3');

var _d32 = _interopRequireDefault(_d3);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _storesAssessmentStore = require('../stores/assessment-store');

var _storesAssessmentStore2 = _interopRequireDefault(_storesAssessmentStore);

var _storesAlgorithmStore = require('../stores/algorithm-store');

var _storesAlgorithmStore2 = _interopRequireDefault(_storesAlgorithmStore);

var _maturityChart = require('./maturity-chart');

var _maturityChart2 = _interopRequireDefault(_maturityChart);

var _algorithmEditor = require('./algorithm-editor');

var _algorithmEditor2 = _interopRequireDefault(_algorithmEditor);

var _algorithmBandEditor = require('./algorithm-band-editor');

var _algorithmBandEditor2 = _interopRequireDefault(_algorithmBandEditor);

var _algorithmHistory = require('./algorithm-history');

var _algorithmHistory2 = _interopRequireDefault(_algorithmHistory);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactTabs = require('react-tabs');

var _reactTabs2 = _interopRequireDefault(_reactTabs);

var _dataEditor = require('./data-editor');

var _dataEditor2 = _interopRequireDefault(_dataEditor);

var STORES = [_storesAlgorithmStore2['default'], _storesAssessmentStore2['default']];

var TeamMaturity = (function (_React$Component) {
	_inherits(TeamMaturity, _React$Component);

	_createClass(TeamMaturity, [{
		key: 'getStateFromStores',
		value: function getStateFromStores() {
			var algorithm = _storesAlgorithmStore2['default'].get();

			var maxTeamScore = _lodash2['default'].sum(algorithm, function (c) {
				return c.weight * _lodash2['default'].max(c.resultWeights);
			});

			return {
				data: _storesAssessmentStore2['default'].get(),
				mode: 'radialcluster',
				algorithm: algorithm,
				bands: _storesAlgorithmStore2['default'].getBands(),
				maxTeamScore: maxTeamScore || 1,
				algorithmHistory: _storesAlgorithmStore2['default'].getHistory()
			};
		}
	}]);

	function TeamMaturity(scope) {
		_classCallCheck(this, TeamMaturity);

		_get(Object.getPrototypeOf(TeamMaturity.prototype), 'constructor', this).call(this, scope);

		this.state = Object.assign({
			showNames: true,
			showScores: true
		}, this.getStateFromStores());

		this._change = this._change.bind(this);
		this._onStoreChange = this._onStoreChange.bind(this);
	}

	_createClass(TeamMaturity, [{
		key: 'render',
		value: function render() {
			var _this = this;

			var modes = [{ mode: 'radialtree', label: 'Radial Tree' }, { mode: 'radialcluster', label: 'Radial Cluster' }, { mode: 'tree', label: 'Tree' }, { mode: 'cluster', label: 'Cluster' }];

			var classes = {
				'maturity-chart': true,
				'show-names': this.state.showNames,
				'show-scores': this.state.showScores
			};

			var algorithmEditorTab = _react2['default'].createElement('div', null);

			var tabs = [{ name: '', component: algorithmEditorTab }];

			return _react2['default'].createElement(
				'div',
				{ className: (0, _classnames2['default'])(classes) },
				_react2['default'].createElement(
					'div',
					{ className: 'row' },
					_react2['default'].createElement(
						'div',
						{ className: 'columns small-12 large-8' },
						_react2['default'].createElement(
							'form',
							null,
							(function () {
								return _lodash2['default'].map(modes, function (mode) {
									return _react2['default'].createElement(
										'label',
										{ key: mode.mode },
										_react2['default'].createElement('input', { type: 'radio', name: 'mode', value: mode.mode,
											onChange: _this._change, checked: _this.state.mode === mode.mode }),
										mode.label
									);
								});
							})()
						)
					),
					_react2['default'].createElement(
						'div',
						{ className: 'columns small-12 large-4' },
						_react2['default'].createElement(
							'form',
							null,
							_react2['default'].createElement(
								'label',
								null,
								_react2['default'].createElement('input', { type: 'checkbox', name: 'names',
									onChange: this._setState.bind(this, 'showNames'),
									checked: this.state.showNames }),
								'show names'
							),
							_react2['default'].createElement(
								'label',
								null,
								_react2['default'].createElement('input', { type: 'checkbox', name: 'names',
									onChange: this._setState.bind(this, 'showScores'),
									checked: this.state.showScores }),
								'show scores'
							)
						)
					)
				),
				_react2['default'].createElement(
					'div',
					{ className: 'row' },
					_react2['default'].createElement(
						'div',
						{ className: 'columns large-8' },
						_react2['default'].createElement(_maturityChart2['default'], { data: this.state.data, mode: this.state.mode,
							nodeClassEvaluator: this.getNodeClass.bind(this),
							nodeScoreEvaluator: this.getNodeScore.bind(this) })
					),
					_react2['default'].createElement(
						'div',
						{ className: 'columns large-4' },
						_react2['default'].createElement(
							_reactTabs.Tabs,
							null,
							_react2['default'].createElement(
								_reactTabs.TabList,
								null,
								_react2['default'].createElement(
									_reactTabs.Tab,
									null,
									'Algorithms'
								),
								_react2['default'].createElement(
									_reactTabs.Tab,
									null,
									'Data'
								)
							),
							_react2['default'].createElement(
								_reactTabs.TabPanel,
								null,
								_react2['default'].createElement(_algorithmEditor2['default'], { algorithm: this.state.algorithm }),
								_react2['default'].createElement(_algorithmBandEditor2['default'], { bands: this.state.bands }),
								_react2['default'].createElement(_algorithmHistory2['default'], { algorithmHistory: this.state.algorithmHistory })
							),
							_react2['default'].createElement(
								_reactTabs.TabPanel,
								null,
								_react2['default'].createElement(_dataEditor2['default'], { data: this.state.data })
							)
						)
					)
				)
			);
		}
	}, {
		key: 'getNodeClass',
		value: function getNodeClass(d) {
			var className = 'chart-node';

			var scoreToClassName = function scoreToClassName(bands, score) {
				var scoreClassName;

				var band = _lodash2['default'].findLast(bands, function (b, key) {
					var result = score >= b;

					if (result) {
						scoreClassName = 'node-' + key.toLowerCase();
					}

					return result;
				});

				scoreClassName = scoreClassName || 'node-pre-forming';

				return scoreClassName;
			};

			if (d.hasOwnProperty('ratings')) {
				className = scoreToClassName(this.state.bands, this.calculateTeamScore(d));
			} else {
				className = scoreToClassName(this.state.bands, this.calculateAreaScore(d));
			}

			return className;
		}
	}, {
		key: 'getNodeScore',
		value: function getNodeScore(d) {
			return Math.round(10 * (d.children ? this.calculateAreaScore(d) : this.calculateTeamScore(d))) / 10;
		}
	}, {
		key: 'calculateTeamScore',
		value: function calculateTeamScore(d) {
			var algorithm = this.state.algorithm;

			// TODO: handle categories we don't know about
			var score = _lodash2['default'].sum(d.ratings, function (r) {
				var category = algorithm[r.category];
				var scale = category.resultWeights;

				return Number(category.weight) * scale[r.rating];
			});

			return 100 * (score || 0) / this.state.maxTeamScore;
		}
	}, {
		key: 'totalWeight',
		value: function totalWeight(d) {
			return d.children ? _lodash2['default'].sum(d.children, this.totalWeight.bind(this)) : 1;
		}
	}, {
		key: 'totalScore',
		value: function totalScore(d) {
			return d.children ? _lodash2['default'].sum(d.children, this.totalScore.bind(this)) : this.calculateTeamScore(d);
		}
	}, {
		key: 'calculateAreaScore',
		value: function calculateAreaScore(d) {
			var weight = this.totalWeight(d);
			var score = this.totalScore(d);

			return (score || 0) / (weight || 1);
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			var _this2 = this;

			_lodash2['default'].each(STORES, function (s) {
				s.addChangeListener(_this2._onStoreChange);
			});
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			var _this3 = this;

			_lodash2['default'].each(STORES, function (s) {
				s.removeChangeListener(_this3._onStoreChange);
			});
		}
	}, {
		key: '_onStoreChange',
		value: function _onStoreChange() {
			this.setState(this.getStateFromStores());
		}
	}, {
		key: '_change',
		value: function _change(e) {
			this.setState({ mode: e.target.value });
		}
	}, {
		key: '_setState',
		value: function _setState(field, e) {
			var newState = {};
			newState[field] = e.target.checked;

			this.setState(newState);
		}
	}]);

	return TeamMaturity;
})(_react2['default'].Component);

exports['default'] = TeamMaturity;
module.exports = exports['default'];


},{"../stores/algorithm-store":13,"../stores/assessment-store":14,"./algorithm-band-editor":4,"./algorithm-editor":5,"./algorithm-history":6,"./data-editor":7,"./maturity-chart":8,"classnames":"classnames","d3":"d3","lodash":"lodash","react":"react","react-tabs":"react-tabs"}],10:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _keymirror = require('keymirror');

var _keymirror2 = _interopRequireDefault(_keymirror);

exports['default'] = {

	ActionTypes: (0, _keymirror2['default'])({
		UPDATE_CATEGORY_WEIGHT: null,
		UPDATE_CATEGORY_VALUE_WEIGHT: null,
		UPDATE_BAND_POSITION: null,

		STORE_ALGORITHM: null,
		RESET_ALGORITHM: null,
		LOAD_ALGORITHM: null,
		DELETE_ALGORITHM: null,

		UPDATE_ASSESSMENT: null
	}),

	Categories: ['Transparency', 'Communication', 'Business Engagement', 'Predictability', 'Prioritization', 'Focus', 'Technical Practices', 'Dependency Management', 'Funding']
};
module.exports = exports['default'];


},{"keymirror":"keymirror"}],11:[function(require,module,exports){
// [ 'Transparency',        'Communication',         'Business Engagement',
//   'Predictability',      'Prioritization',        'Focus',
//   'Technical Practices', 'Dependency Management', 'Funding']

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
function getRatings(transparency, communication, engagement, predictability, prioritization, focus, techPractices, dependency, funding) {
  return [{ category: 'Transparency', rating: transparency }, { category: 'Communication', rating: communication }, { category: 'Business Engagement', rating: engagement }, { category: 'Predictability', rating: predictability }, { category: 'Prioritization', rating: prioritization }, { category: 'Focus', rating: focus }, { category: 'Technical Practices', rating: techPractices }, { category: 'Dependency Management', rating: dependency }, { category: 'Funding', rating: funding }];
}

exports['default'] = {
  //  name: 'Equifax',
  //  children: [
  //    {
  //      name: 'Workforce Solutions',
  //      children: [
  //        { name: 'I9 - A&R', ratings: getRatings(1,2,2,3,2,2,2,1,1) },
  //        { name: 'I9 - Dashboard', ratings: getRatings(0,1,1,1,1,1,2,1,1) },
  //        { name: 'CC - ONB', ratings: getRatings(0,1,1,0,0,0,0,0,0) },
  //        { name: 'Verifier - Web', ratings: getRatings(3,2,1,3,2,2,1,2,1) },
  //        //        { name: 'Verifier - Core', ratings: getRatings(1,1,1,2,2,1,1,2,1) }
  //        { name: 'Verifier - Core', ratings: getRatings(3,3,2,3,3,3,2,3,1) }
  //      ]
  //    }, {
  name: 'CSE',
  children: [{
    name: 'DEP',
    children: [{ name: 'Closure', ratings: getRatings(1, 0, 2, 1, 1, 0, 3, 1, 2) }, { name: 'First Principles', ratings: getRatings(1, 0, 2, 1, 1, 0, 3, 1, 2) }, { name: 'Functor', ratings: getRatings(1, 0, 2, 1, 1, 0, 3, 1, 2) }, { name: 'Immutable', ratings: getRatings(1, 0, 2, 1, 1, 0, 3, 1, 2) }, { name: 'Monad', ratings: getRatings(1, 0, 2, 1, 1, 0, 3, 1, 2) }]
  }, {
    name: 'Fraud',
    children: [{ name: 'Int\'l', ratings: getRatings(2, 3, 3, 1, 2, 3, 2, 3, 3) }]
  }, {
    name: 'IC',
    children: [{ name: 'Dionysus', ratings: getRatings(2, 1, 3, 3, 3, 3, 2, 3, 3) }, { name: 'Chronos', ratings: getRatings(2, 3, 3, 2, 3, 3, 2, 3, 3) }, { name: 'Athena', ratings: getRatings(2, 1, 3, 3, 3, 3, 2, 3, 3) }, { name: 'Techne', ratings: getRatings(2, 1, 3, 2, 3, 3, 2, 2, 3) }, { name: 'Zeus', ratings: getRatings(2, 2, 2, 2, 3, 3, 2, 3, 3) }, { name: 'Hades', ratings: getRatings(2, 2, 2, 3, 3, 2, 3, 1, 3) }]
  }, {
    name: 'IFS',
    children: [{ name: 'Draco', ratings: getRatings(2, 1, 3, 1, 2, 3, 1, 3, 3) }, { name: 'Orion', ratings: getRatings(2, 1, 3, 1, 2, 3, 1, 3, 3) }, { name: 'Indus', ratings: getRatings(2, 2, 2, 3, 3, 3, 2, 3, 3) }, { name: 'Vega', ratings: getRatings(2, 1, 3, 1, 2, 3, 1, 3, 3) }, { name: 'Phoenix', ratings: getRatings(2, 1, 3, 1, 2, 3, 1, 3, 3) }]
  }, {
    name: 'Web COE',
    children: [{ name: 'Internet', ratings: getRatings(1, 0, 1, 1, 1, 0, 1, 1, 1) }, { name: 'Design', ratings: getRatings(1, 0, 1, 1, 1, 0, 1, 1, 1) }, { name: 'Intranet', ratings: getRatings(1, 0, 1, 1, 1, 0, 1, 1, 1) }, { name: 'UX', ratings: getRatings(1, 0, 1, 1, 1, 0, 1, 1, 1) }]
  }]
  //    }, {
  //      name: 'Commercial',
  //      children: [
  //        { name: 'BC', ratings: getRatings(2,3,3,3,2,2,0,3,3) }
  //      ]
  //    }, {
  //      name: 'KFE',
  //      children: [
  //        { name: 'KFE', ratings: getRatings(2,0,2,2,3,3,0,2,1) }
  //      ]
  //    }, {
  //      name: 'Mortgage',
  //      children: [
  //        { name: 'PD&A', ratings: getRatings(0,0,0,1,0,1,0,1,1) }
  //      ]
  //    }, {
  //      name: 'Auto',
  //      children: [
  //        { name: 'Auto', ratings: getRatings(1,3,2,1,2,2,1,1,1) }
  //      ]
  //    }
  //  ]
};
module.exports = exports['default'];


},{}],12:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _flux = require('flux');

var _flux2 = _interopRequireDefault(_flux);

exports['default'] = new _flux2['default'].Dispatcher();
module.exports = exports['default'];


},{"flux":"flux"}],13:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _flux = require('flux');

var _flux2 = _interopRequireDefault(_flux);

var _dispatchersDispatcher = require('../dispatchers/dispatcher');

var _dispatchersDispatcher2 = _interopRequireDefault(_dispatchersDispatcher);

var _constantsMaturityConstants = require('../constants/maturity-constants');

var _events = require('events');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var CHANGE_EVENT = 'change';

var _categories = _constantsMaturityConstants.Categories;
var _algorithm;
var _bands;

function init() {
  try {
    _algorithm = JSON.parse(localStorage.algorithm);
    _bands = JSON.parse(localStorage['algorithm-bands']);
  } catch (e) {}

  if (!_algorithm) {
    _algorithm = getInitialWeights();
    _bands = getInitialBands();
    storeAlgorithm();
  }
}

var AlgorithmStore = Object.assign({}, _events.EventEmitter.prototype, {
  emitChange: function emitChange() {
    this.emit(CHANGE_EVENT);
  },

  addChangeListener: function addChangeListener(callback) {
    this.on(CHANGE_EVENT, callback);
  },

  removeChangeListener: function removeChangeListener(callback) {
    this.removeListener(CHANGE_EVENT, callback);
  },

  get: function get() {
    return _algorithm;
  },

  getCategories: function getCategories() {
    return _categories;
  },

  getBands: function getBands() {
    return _bands;
  },

  getHistory: function getHistory() {
    return JSON.parse(localStorage.algorithmHistory || '[]');
  }
});

AlgorithmStore.dispatchToken = _dispatchersDispatcher2['default'].register(function (action) {
  switch (action.type) {
    case _constantsMaturityConstants.ActionTypes.UPDATE_CATEGORY_VALUE_WEIGHT:
      _updateCategoryValueWeight(action.category, action.position, action.weight);
      break;

    case _constantsMaturityConstants.ActionTypes.UPDATE_BAND_POSITION:
      _updateBandPosition(action.position, action.value);
      break;

    case _constantsMaturityConstants.ActionTypes.DELETE_ALGORITHM:
      _deleteAlgorithmInHistory(action.timestamp);
      break;

    case _constantsMaturityConstants.ActionTypes.STORE_ALGORITHM:
      _storeAlgorithmInHistory(Date.now(), _algorithm, _bands);
      break;

    case _constantsMaturityConstants.ActionTypes.LOAD_ALGORITHM:
      _loadAlgorithmFromHistory(action.timestamp);
      break;

    case _constantsMaturityConstants.ActionTypes.RESET_ALGORITHM:
      _resetAlgorithm();
      break;
  }
});

function getInitialWeights() {
  var weights = {
    'Transparency': { weight: 1, resultWeights: [-1, 0, 1, 1.1] },
    'Communication': { weight: 1, resultWeights: [-2, 0, 1, 1.5] },
    'Business Engagement': { weight: 1, resultWeights: [-1, 0, 1, 1.5] },
    'Predictability': { weight: 1, resultWeights: [-1, 0, 1, 1.5] },
    'Prioritization': { weight: 1, resultWeights: [-1, 0, 1, 1.5] },
    'Focus': { weight: 1, resultWeights: [-1, 0, 1, 2] },
    'Technical Practices': { weight: 1, resultWeights: [-2, 0, 2, 4] },
    'Dependency Management': { weight: 1, resultWeights: [-1, 0, 1, 1.5] },
    'Funding': { weight: 1, resultWeights: [-1, 0, 1, 1.5] }
  };

  //  var weights = {};
  //
  //  for(var i in _categories){
  //    weights[_categories[i]] = {
  //      weight: 1,
  //      resultWeights: [-1, 0, 1, 1.5]
  //    };
  //  }
  //
  return weights;
}

function getInitialBands() {
  return {
    'Pre-forming': 0,
    'Forming': 25,
    'Norming': 35,
    'Performing': 85
  };
}

function _updateCategoryValueWeight(category, position, weight) {
  var category = _algorithm[category];

  if (!category || category.resultWeights.length <= position) {
    return;
  }

  category.resultWeights[position] = weight;
  category.resultWeights = category.resultWeights.slice();

  _algorithm = Object.assign({}, _algorithm);
  storeAlgorithm();

  AlgorithmStore.emitChange();
}

function _updateBandPosition(position, value) {
  var newValues = {};
  newValues[position] = value;

  _bands = Object.assign({}, _bands, newValues);

  storeAlgorithm();

  AlgorithmStore.emitChange();
}

function _storeAlgorithmInHistory(timestamp, algorithm, bands) {
  var history = JSON.parse(localStorage.algorithmHistory || '[]');

  history.unshift({
    timestamp: timestamp,
    algorithm: algorithm,
    bands: bands
  });

  localStorage.algorithmHistory = JSON.stringify(history);

  AlgorithmStore.emitChange();
}

function _deleteAlgorithmInHistory(timestamp) {
  var history = JSON.parse(localStorage.algorithmHistory || '[]');

  history = _lodash2['default'].reject(history, function (h) {
    return h.timestamp === timestamp;
  });

  localStorage.algorithmHistory = JSON.stringify(history);

  AlgorithmStore.emitChange();
}

function _loadAlgorithmFromHistory(timestamp) {
  var history = JSON.parse(localStorage.algorithmHistory || '[]');

  var snapshot = _lodash2['default'].find(history, function (h) {
    return h.timestamp === timestamp;
  });
  if (snapshot) {
    _algorithm = snapshot.algorithm;
    _bands = snapshot.bands;

    AlgorithmStore.emitChange();
  }
}

function _resetAlgorithm() {
  _algorithm = getInitialWeights();
  _bands = getInitialBands();

  storeAlgorithm();

  AlgorithmStore.emitChange();
}

function storeAlgorithm() {
  localStorage.setItem('algorithm', JSON.stringify(_algorithm));
  localStorage.setItem('algorithm-bands', JSON.stringify(_bands));
}

init();

exports['default'] = AlgorithmStore;
module.exports = exports['default'];


},{"../constants/maturity-constants":10,"../dispatchers/dispatcher":12,"events":"events","flux":"flux","lodash":"lodash"}],14:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _constantsMaturityConstants = require('../constants/maturity-constants');

var _constantsMaturityResults = require('../constants/maturity-results');

var _constantsMaturityResults2 = _interopRequireDefault(_constantsMaturityResults);

var _dispatchersDispatcher = require('../dispatchers/dispatcher');

var _dispatchersDispatcher2 = _interopRequireDefault(_dispatchersDispatcher);

var _events = require('events');

var teamIncrement = 1;
var areaIncrement = 1;
var CHANGE_EVENT = 'change';

Math.seed = function (s) {
  var m_w = s;
  var m_z = 987654321;
  var mask = 0xffffffff;

  return function () {
    m_z = 36969 * (m_z & 65535) + (m_z >> 16) & mask;
    m_w = 18000 * (m_w & 65535) + (m_w >> 16) & mask;

    var result = (m_z << 16) + m_w & mask;
    result /= 4294967296;

    return result + 0.5;
  };
};
var random = Math.seed(1234);

var _assessment = _constantsMaturityResults2['default'];
//_assessment = initRandomAssessment(random);

function initRandomAssessment(random) {
  var generateRatings = function generateRatings(count) {
    var ratings = [];

    var ratingsBias = Math.floor(random() * 3);

    for (var i = 0; i < _constantsMaturityConstants.Categories.length; i++) {
      ratings.push({
        category: _constantsMaturityConstants.Categories[i],
        rating: Math.min(ratingsBias + Math.floor(random() * 4), 3)
      });
    }

    return ratings;
  };

  var area = 0;
  var generateArea = function generateArea(childCount, nesting) {
    nesting = nesting || 0;

    var children = [];

    if (nesting > 0) {
      nesting--;

      for (var i = 0; i < childCount; i++) {
        if (random() < .2) {
          var areaChildren = 2 + Math.floor(random() * 5);
          children.push(generateArea(areaChildren, nesting));
        } else {
          children.push(generateTeam('Team ' + teamIncrement++));
        }
      }
    } else {
      var children = generateTeams(childCount, nesting--);
    }

    return {
      name: 'Area ' + areaIncrement++,
      children: children
    };
  };

  var generateTeam = function generateTeam(name) {
    return { name: name, ratings: generateRatings() };
  };

  var generateTeams = function generateTeams(count, nesting) {
    nesting = nesting || 0;
    var teams = [];

    for (var i = 0; i < count; i++) {
      teams.push(generateTeam('Team ' + teamIncrement++));
    }

    return teams;
  };

  return {
    name: 'Root node',
    children: [generateArea(3), generateArea(4, 1), generateArea(7), generateArea(5, 2)]
  };
}

var AssessmentStore = (function (_EventEmitter) {
  _inherits(AssessmentStore, _EventEmitter);

  function AssessmentStore() {
    _classCallCheck(this, AssessmentStore);

    _get(Object.getPrototypeOf(AssessmentStore.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(AssessmentStore, [{
    key: 'addChangeListener',
    value: function addChangeListener(callback) {
      this.on(CHANGE_EVENT, callback);
    }
  }, {
    key: 'removeChangeListener',
    value: function removeChangeListener(callback) {
      this.removeListener(CHANGE_EVENT, callback);
    }
  }, {
    key: 'emitChange',
    value: function emitChange() {
      this.emit(CHANGE_EVENT);
    }
  }, {
    key: 'get',
    value: function get() {
      return _assessment;
    }
  }]);

  return AssessmentStore;
})(_events.EventEmitter);

AssessmentStore.dispatchToken = _dispatchersDispatcher2['default'].register(function (action) {
  switch (action.type) {
    case _constantsMaturityConstants.ActionTypes.UPDATE_ASSESSMENT:
      console.log('here');
      _assessment = action.data;
      store.emitChange();
      break;
  }
});

var store = new AssessmentStore();

exports['default'] = store;
module.exports = exports['default'];


},{"../constants/maturity-constants":10,"../constants/maturity-results":11,"../dispatchers/dispatcher":12,"events":"events"}]},{},[3])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
